{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","onClickEvent","value","Board","initialSquares","Array","fill","useState","squares","setSquares","xIsNext","setXIsNext","renderSquare","i","newSquares","winnerDeclared","Boolean","calculateWinner","squaredFilled","handledClickEvent","winner","status","Game","line","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"oMAMMA,EAAS,SAACC,GACd,OACE,wBACEC,UAAU,SACVC,QAASF,EAAMG,aAFjB,SAIGH,EAAMI,SAMPC,EAAQ,WACZ,IAAMC,EAAiBC,MAAM,GAAGC,KAAK,MADnB,EAEYC,mBAASH,GAFrB,mBAEXI,EAFW,KAEFC,EAFE,OAGYF,oBAAS,GAHrB,mBAGXG,EAHW,KAGFC,EAHE,KAyBZC,EAAe,SAACC,GACpB,OACE,cAAChB,EAAD,CAAQK,MAAOM,EAAQK,GACvBZ,aAAc,kBAtBQ,SAACY,GAEzB,IAAMC,EAAU,YAAON,GAEjBO,EAAiBC,QAAQC,EAAgBH,IACzCI,EAAgBF,QAAQF,EAAWD,IAErCE,GAAkBG,IAKtBJ,EAAWD,GAAKH,EAAU,IAAM,IAEhCD,EAAWK,GACXH,GAAYD,IAOUS,CAAkBN,OAKpCO,EAASH,EAAgBT,GACzBa,EAASD,EAAM,kBACRA,GADQ,uBAEHV,EAAU,IAAM,KAElC,OACE,gCACE,qBAAKX,UAAU,SAAf,SAAyBsB,IACzB,sBAAKtB,UAAU,YAAf,UACGa,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAElD,sBAAKb,UAAU,YAAf,UACGa,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAElD,sBAAKb,UAAU,YAAf,UACGa,EAAa,GAAIA,EAAa,GAAIA,EAAa,UAQlDU,EAAO,WACX,OACE,sBAAKvB,UAAU,OAAf,wBAEE,cAACI,EAAD,QAYN,SAASc,EAAgBT,GAOvB,IANA,IAMA,MANc,CACZ,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAGpB,eAAwB,CAAnB,IAAIe,EAAI,KAAW,cACJA,EADI,GACfC,EADe,KACZC,EADY,KACTC,EADS,KAGtB,GAAIlB,EAAQgB,IAAMhB,EAAQgB,KAAOhB,EAAQiB,IAAMjB,EAAQgB,KAAOhB,EAAQkB,GACpE,OAAOlB,EAAQgB,GAInB,OAAO,KArBTG,IAASC,OACP,cAACN,EAAD,IACAO,SAASC,eAAe,W","file":"static/js/main.392d76ad.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\n// Square component\r\nconst Square = (props) => {\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      onClick={props.onClickEvent}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\n// Board component\r\nconst Board = () => {\r\n  const initialSquares = Array(9).fill(null);\r\n  const [squares, setSquares] = useState(initialSquares);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n\r\n  // handledClickEvent function\r\n  const handledClickEvent = (i) => {\r\n    // 1. Make a copy of squares state array\r\n    const newSquares = [...squares];\r\n\r\n    const winnerDeclared = Boolean(calculateWinner(newSquares));\r\n    const squaredFilled = Boolean(newSquares[i]);\r\n    // Returning early - if a player has already won or the square is already filled\r\n    if (winnerDeclared || squaredFilled) {\r\n      return;\r\n    }\r\n\r\n    // 2. Mutate the copy, setting the i-th element to 'X'\r\n    newSquares[i] = xIsNext ? 'X' : 'O';\r\n    // 3. Call the setSquares functions with the mutated copy\r\n    setSquares(newSquares);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  // Render Square component\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square value={squares[i]}\r\n      onClickEvent={() => handledClickEvent(i)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const winner = calculateWinner(squares);\r\n  const status = winner ?\r\n    `Winner: ${winner}` :\r\n    `Next player: ${xIsNext ? 'X' : 'O'}`;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}{renderSquare(1)}{renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}{renderSquare(4)}{renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}{renderSquare(7)}{renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n// Game component\r\nconst Game = () => {\r\n  return (\r\n    <div className=\"game\">\r\n      Tic-Tac-Toe\r\n      <Board />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Game component render\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// Calculate winner function\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\r\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // colums\r\n    [0, 4, 8], [2, 4, 6], // diagonals\r\n  ];\r\n\r\n  for (let line of lines) {\r\n    const [a, b, c] = line;\r\n\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a]; // 'X' or 'O'\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n"],"sourceRoot":""}